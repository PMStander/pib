extend type Query {
  """
  ✨ Look up a single `BusinessProfile` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  businessProfile(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: BusinessProfile_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: BusinessProfile_FirstRow
  ): BusinessProfile @fdc_generated(from: "BusinessProfile", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `LLMKey` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  lLMKey(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: LLMKey_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: LLMKey_FirstRow
  ): LLMKey @fdc_generated(from: "LLMKey", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `PartnerPreferences` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  partnerPreferences(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: PartnerPreferences_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: PartnerPreferences_FirstRow
  ): PartnerPreferences @fdc_generated(from: "PartnerPreferences", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `Profile` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  profile(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Profile_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Profile_FirstRow
  ): Profile @fdc_generated(from: "Profile", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `User` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  user(
    """
    The unique ID of the object.
    """
    id: String

    """
    ✨ `_expr` server value variant of `id` (The unique ID of the object.)
    """
    id_expr: String_Expr

    """
    The key used to identify the object.
    """
    key: User_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: User_FirstRow
  ): User @fdc_generated(from: "User", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `Workspace` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  workspace(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Workspace_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Workspace_FirstRow
  ): Workspace @fdc_generated(from: "Workspace", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `WorkspaceInvitation` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  workspaceInvitation(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: WorkspaceInvitation_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: WorkspaceInvitation_FirstRow
  ): WorkspaceInvitation @fdc_generated(from: "WorkspaceInvitation", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `WorkspaceMember` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  workspaceMember(
    """
    The key used to identify the object.
    """
    key: WorkspaceMember_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: WorkspaceMember_FirstRow
  ): WorkspaceMember @fdc_generated(from: "WorkspaceMember", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `WorkspaceUser` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  workspaceUser(
    """
    The key used to identify the object.
    """
    key: WorkspaceUser_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: WorkspaceUser_FirstRow
  ): WorkspaceUser @fdc_generated(from: "WorkspaceUser", purpose: QUERY_SINGLE)
  """
  ✨ List `BusinessProfile` objects in the table, optionally filtered by `where` conditions.
  """
  businessProfiles(
    """
    Filter condition to narrow down the query results.
    """
    where: BusinessProfile_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [BusinessProfile_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [BusinessProfile!]! @fdc_generated(from: "BusinessProfile", purpose: QUERY_MULTIPLE)
  """
  ✨ List `LLMKey` objects in the table, optionally filtered by `where` conditions.
  """
  lLMKeys(
    """
    Filter condition to narrow down the query results.
    """
    where: LLMKey_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [LLMKey_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [LLMKey!]! @fdc_generated(from: "LLMKey", purpose: QUERY_MULTIPLE)
  """
  ✨ List `PartnerPreferences` objects in the table, optionally filtered by `where` conditions.
  """
  partnerPreferencess(
    """
    Filter condition to narrow down the query results.
    """
    where: PartnerPreferences_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [PartnerPreferences_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [PartnerPreferences!]! @fdc_generated(from: "PartnerPreferences", purpose: QUERY_MULTIPLE)
  """
  ✨ List `Profile` objects in the table, optionally filtered by `where` conditions.
  """
  profiles(
    """
    Filter condition to narrow down the query results.
    """
    where: Profile_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Profile_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [Profile!]! @fdc_generated(from: "Profile", purpose: QUERY_MULTIPLE)
  """
  ✨ List `User` objects in the table, optionally filtered by `where` conditions.
  """
  users(
    """
    Filter condition to narrow down the query results.
    """
    where: User_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [User_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [User!]! @fdc_generated(from: "User", purpose: QUERY_MULTIPLE)
  """
  ✨ List `Workspace` objects in the table, optionally filtered by `where` conditions.
  """
  workspaces(
    """
    Filter condition to narrow down the query results.
    """
    where: Workspace_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Workspace_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [Workspace!]! @fdc_generated(from: "Workspace", purpose: QUERY_MULTIPLE)
  """
  ✨ List `WorkspaceInvitation` objects in the table, optionally filtered by `where` conditions.
  """
  workspaceInvitations(
    """
    Filter condition to narrow down the query results.
    """
    where: WorkspaceInvitation_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [WorkspaceInvitation_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [WorkspaceInvitation!]! @fdc_generated(from: "WorkspaceInvitation", purpose: QUERY_MULTIPLE)
  """
  ✨ List `WorkspaceMember` objects in the table, optionally filtered by `where` conditions.
  """
  workspaceMembers(
    """
    Filter condition to narrow down the query results.
    """
    where: WorkspaceMember_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [WorkspaceMember_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [WorkspaceMember!]! @fdc_generated(from: "WorkspaceMember", purpose: QUERY_MULTIPLE)
  """
  ✨ List `WorkspaceUser` objects in the table, optionally filtered by `where` conditions.
  """
  workspaceUsers(
    """
    Filter condition to narrow down the query results.
    """
    where: WorkspaceUser_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [WorkspaceUser_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [WorkspaceUser!]! @fdc_generated(from: "WorkspaceUser", purpose: QUERY_MULTIPLE)
  """
  ✨ List `BusinessProfile` objects ordered by vector similarity between the `descriptionEmbedding` field and `compare_embed`.
  (Alternatively, `compare` can be used if the input is a raw Vector.)
  """
  businessProfiles_descriptionEmbedding_similarity(
    """
    Vector to compare with the stored vectors.
    """
    compare: Vector

    """
    ✨ `_embed` server value variant of `compare` (Vector to compare with the stored vectors.)
    """
    compare_embed: Vector_Embed

    """
    Similarity method to use for vector comparison (defaults to `INNER_PRODUCT`).
    """
    method: VectorSimilarityMethod = INNER_PRODUCT

    """
    Threshold for distance comparison.
    """
    within: Float

    """
    Filter condition to apply when searching for similar vectors.
    """
    where: BusinessProfile_Filter

    """
    Limit the number of similar vectors returned (defaults to 100 rows).
    """
    limit: Int = 100
  ): [BusinessProfile!]! @fdc_generated(from: "BusinessProfile.descriptionEmbedding", purpose: QUERY_MULTIPLE_BY_SIMILARITY)
  """
  ✨ List `PartnerPreferences` objects ordered by vector similarity between the `combinedEmbedding` field and `compare_embed`.
  (Alternatively, `compare` can be used if the input is a raw Vector.)
  """
  partnerPreferencess_combinedEmbedding_similarity(
    """
    Vector to compare with the stored vectors.
    """
    compare: Vector

    """
    ✨ `_embed` server value variant of `compare` (Vector to compare with the stored vectors.)
    """
    compare_embed: Vector_Embed

    """
    Similarity method to use for vector comparison (defaults to `INNER_PRODUCT`).
    """
    method: VectorSimilarityMethod = INNER_PRODUCT

    """
    Threshold for distance comparison.
    """
    within: Float

    """
    Filter condition to apply when searching for similar vectors.
    """
    where: PartnerPreferences_Filter

    """
    Limit the number of similar vectors returned (defaults to 100 rows).
    """
    limit: Int = 100
  ): [PartnerPreferences!]! @fdc_generated(from: "PartnerPreferences.combinedEmbedding", purpose: QUERY_MULTIPLE_BY_SIMILARITY)
  """
  ✨ List `Profile` objects ordered by vector similarity between the `bioEmbedding` field and `compare_embed`.
  (Alternatively, `compare` can be used if the input is a raw Vector.)
  """
  profiles_bioEmbedding_similarity(
    """
    Vector to compare with the stored vectors.
    """
    compare: Vector

    """
    ✨ `_embed` server value variant of `compare` (Vector to compare with the stored vectors.)
    """
    compare_embed: Vector_Embed

    """
    Similarity method to use for vector comparison (defaults to `INNER_PRODUCT`).
    """
    method: VectorSimilarityMethod = INNER_PRODUCT

    """
    Threshold for distance comparison.
    """
    within: Float

    """
    Filter condition to apply when searching for similar vectors.
    """
    where: Profile_Filter

    """
    Limit the number of similar vectors returned (defaults to 100 rows).
    """
    limit: Int = 100
  ): [Profile!]! @fdc_generated(from: "Profile.bioEmbedding", purpose: QUERY_MULTIPLE_BY_SIMILARITY)
}
