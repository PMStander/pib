extend type Mutation {
  """
  ✨ Insert a single `BusinessProfile` into the table. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  businessProfile_insert(
    """
    Data object to insert into the table.
    """
    data: BusinessProfile_Data!
  ): BusinessProfile_KeyOutput! @fdc_generated(from: "BusinessProfile", purpose: INSERT_SINGLE)
  """
  ✨ Insert a single `LLMKey` into the table. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  lLMKey_insert(
    """
    Data object to insert into the table.
    """
    data: LLMKey_Data!
  ): LLMKey_KeyOutput! @fdc_generated(from: "LLMKey", purpose: INSERT_SINGLE)
  """
  ✨ Insert a single `PartnerPreferences` into the table. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  partnerPreferences_insert(
    """
    Data object to insert into the table.
    """
    data: PartnerPreferences_Data!
  ): PartnerPreferences_KeyOutput! @fdc_generated(from: "PartnerPreferences", purpose: INSERT_SINGLE)
  """
  ✨ Insert a single `Profile` into the table. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  profile_insert(
    """
    Data object to insert into the table.
    """
    data: Profile_Data!
  ): Profile_KeyOutput! @fdc_generated(from: "Profile", purpose: INSERT_SINGLE)
  """
  ✨ Insert a single `User` into the table. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  user_insert(
    """
    Data object to insert into the table.
    """
    data: User_Data!
  ): User_KeyOutput! @fdc_generated(from: "User", purpose: INSERT_SINGLE)
  """
  ✨ Insert a single `Workspace` into the table. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  workspace_insert(
    """
    Data object to insert into the table.
    """
    data: Workspace_Data!
  ): Workspace_KeyOutput! @fdc_generated(from: "Workspace", purpose: INSERT_SINGLE)
  """
  ✨ Insert a single `WorkspaceInvitation` into the table. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  workspaceInvitation_insert(
    """
    Data object to insert into the table.
    """
    data: WorkspaceInvitation_Data!
  ): WorkspaceInvitation_KeyOutput! @fdc_generated(from: "WorkspaceInvitation", purpose: INSERT_SINGLE)
  """
  ✨ Insert a single `WorkspaceMember` into the table. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  workspaceMember_insert(
    """
    Data object to insert into the table.
    """
    data: WorkspaceMember_Data!
  ): WorkspaceMember_KeyOutput! @fdc_generated(from: "WorkspaceMember", purpose: INSERT_SINGLE)
  """
  ✨ Insert a single `WorkspaceUser` into the table. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  workspaceUser_insert(
    """
    Data object to insert into the table.
    """
    data: WorkspaceUser_Data!
  ): WorkspaceUser_KeyOutput! @fdc_generated(from: "WorkspaceUser", purpose: INSERT_SINGLE)
  """
  ✨ Insert `BusinessProfile` objects into the table. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  businessProfile_insertMany(
    """
    List of data objects to insert into the table.
    """
    data: [BusinessProfile_Data!]!
  ): [BusinessProfile_KeyOutput!]! @fdc_generated(from: "BusinessProfile", purpose: INSERT_MULTIPLE)
  """
  ✨ Insert `LLMKey` objects into the table. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  lLMKey_insertMany(
    """
    List of data objects to insert into the table.
    """
    data: [LLMKey_Data!]!
  ): [LLMKey_KeyOutput!]! @fdc_generated(from: "LLMKey", purpose: INSERT_MULTIPLE)
  """
  ✨ Insert `PartnerPreferences` objects into the table. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  partnerPreferences_insertMany(
    """
    List of data objects to insert into the table.
    """
    data: [PartnerPreferences_Data!]!
  ): [PartnerPreferences_KeyOutput!]! @fdc_generated(from: "PartnerPreferences", purpose: INSERT_MULTIPLE)
  """
  ✨ Insert `Profile` objects into the table. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  profile_insertMany(
    """
    List of data objects to insert into the table.
    """
    data: [Profile_Data!]!
  ): [Profile_KeyOutput!]! @fdc_generated(from: "Profile", purpose: INSERT_MULTIPLE)
  """
  ✨ Insert `User` objects into the table. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  user_insertMany(
    """
    List of data objects to insert into the table.
    """
    data: [User_Data!]!
  ): [User_KeyOutput!]! @fdc_generated(from: "User", purpose: INSERT_MULTIPLE)
  """
  ✨ Insert `Workspace` objects into the table. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  workspace_insertMany(
    """
    List of data objects to insert into the table.
    """
    data: [Workspace_Data!]!
  ): [Workspace_KeyOutput!]! @fdc_generated(from: "Workspace", purpose: INSERT_MULTIPLE)
  """
  ✨ Insert `WorkspaceInvitation` objects into the table. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  workspaceInvitation_insertMany(
    """
    List of data objects to insert into the table.
    """
    data: [WorkspaceInvitation_Data!]!
  ): [WorkspaceInvitation_KeyOutput!]! @fdc_generated(from: "WorkspaceInvitation", purpose: INSERT_MULTIPLE)
  """
  ✨ Insert `WorkspaceMember` objects into the table. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  workspaceMember_insertMany(
    """
    List of data objects to insert into the table.
    """
    data: [WorkspaceMember_Data!]!
  ): [WorkspaceMember_KeyOutput!]! @fdc_generated(from: "WorkspaceMember", purpose: INSERT_MULTIPLE)
  """
  ✨ Insert `WorkspaceUser` objects into the table. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  workspaceUser_insertMany(
    """
    List of data objects to insert into the table.
    """
    data: [WorkspaceUser_Data!]!
  ): [WorkspaceUser_KeyOutput!]! @fdc_generated(from: "WorkspaceUser", purpose: INSERT_MULTIPLE)
  """
  ✨ Insert or update a single `BusinessProfile` into the table, based on the primary key. Returns the key of the newly inserted `BusinessProfile`.
  """
  businessProfile_upsert(
    """
    Data object to insert or update if it already exists.
    """
    data: BusinessProfile_Data!
  ): BusinessProfile_KeyOutput! @fdc_generated(from: "BusinessProfile", purpose: UPSERT_SINGLE)
  """
  ✨ Insert or update a single `LLMKey` into the table, based on the primary key. Returns the key of the newly inserted `LLMKey`.
  """
  lLMKey_upsert(
    """
    Data object to insert or update if it already exists.
    """
    data: LLMKey_Data!
  ): LLMKey_KeyOutput! @fdc_generated(from: "LLMKey", purpose: UPSERT_SINGLE)
  """
  ✨ Insert or update a single `PartnerPreferences` into the table, based on the primary key. Returns the key of the newly inserted `PartnerPreferences`.
  """
  partnerPreferences_upsert(
    """
    Data object to insert or update if it already exists.
    """
    data: PartnerPreferences_Data!
  ): PartnerPreferences_KeyOutput! @fdc_generated(from: "PartnerPreferences", purpose: UPSERT_SINGLE)
  """
  ✨ Insert or update a single `Profile` into the table, based on the primary key. Returns the key of the newly inserted `Profile`.
  """
  profile_upsert(
    """
    Data object to insert or update if it already exists.
    """
    data: Profile_Data!
  ): Profile_KeyOutput! @fdc_generated(from: "Profile", purpose: UPSERT_SINGLE)
  """
  ✨ Insert or update a single `User` into the table, based on the primary key. Returns the key of the newly inserted `User`.
  """
  user_upsert(
    """
    Data object to insert or update if it already exists.
    """
    data: User_Data!
  ): User_KeyOutput! @fdc_generated(from: "User", purpose: UPSERT_SINGLE)
  """
  ✨ Insert or update a single `Workspace` into the table, based on the primary key. Returns the key of the newly inserted `Workspace`.
  """
  workspace_upsert(
    """
    Data object to insert or update if it already exists.
    """
    data: Workspace_Data!
  ): Workspace_KeyOutput! @fdc_generated(from: "Workspace", purpose: UPSERT_SINGLE)
  """
  ✨ Insert or update a single `WorkspaceInvitation` into the table, based on the primary key. Returns the key of the newly inserted `WorkspaceInvitation`.
  """
  workspaceInvitation_upsert(
    """
    Data object to insert or update if it already exists.
    """
    data: WorkspaceInvitation_Data!
  ): WorkspaceInvitation_KeyOutput! @fdc_generated(from: "WorkspaceInvitation", purpose: UPSERT_SINGLE)
  """
  ✨ Insert or update a single `WorkspaceMember` into the table, based on the primary key. Returns the key of the newly inserted `WorkspaceMember`.
  """
  workspaceMember_upsert(
    """
    Data object to insert or update if it already exists.
    """
    data: WorkspaceMember_Data!
  ): WorkspaceMember_KeyOutput! @fdc_generated(from: "WorkspaceMember", purpose: UPSERT_SINGLE)
  """
  ✨ Insert or update a single `WorkspaceUser` into the table, based on the primary key. Returns the key of the newly inserted `WorkspaceUser`.
  """
  workspaceUser_upsert(
    """
    Data object to insert or update if it already exists.
    """
    data: WorkspaceUser_Data!
  ): WorkspaceUser_KeyOutput! @fdc_generated(from: "WorkspaceUser", purpose: UPSERT_SINGLE)
  """
  ✨ Insert or update `BusinessProfile` objects into the table, based on the primary key. Returns the key of the newly inserted `BusinessProfile`.
  """
  businessProfile_upsertMany(
    """
    List of data objects to insert or update if it already exists.
    """
    data: [BusinessProfile_Data!]!
  ): [BusinessProfile_KeyOutput!]! @fdc_generated(from: "BusinessProfile", purpose: UPSERT_MULTIPLE)
  """
  ✨ Insert or update `LLMKey` objects into the table, based on the primary key. Returns the key of the newly inserted `LLMKey`.
  """
  lLMKey_upsertMany(
    """
    List of data objects to insert or update if it already exists.
    """
    data: [LLMKey_Data!]!
  ): [LLMKey_KeyOutput!]! @fdc_generated(from: "LLMKey", purpose: UPSERT_MULTIPLE)
  """
  ✨ Insert or update `PartnerPreferences` objects into the table, based on the primary key. Returns the key of the newly inserted `PartnerPreferences`.
  """
  partnerPreferences_upsertMany(
    """
    List of data objects to insert or update if it already exists.
    """
    data: [PartnerPreferences_Data!]!
  ): [PartnerPreferences_KeyOutput!]! @fdc_generated(from: "PartnerPreferences", purpose: UPSERT_MULTIPLE)
  """
  ✨ Insert or update `Profile` objects into the table, based on the primary key. Returns the key of the newly inserted `Profile`.
  """
  profile_upsertMany(
    """
    List of data objects to insert or update if it already exists.
    """
    data: [Profile_Data!]!
  ): [Profile_KeyOutput!]! @fdc_generated(from: "Profile", purpose: UPSERT_MULTIPLE)
  """
  ✨ Insert or update `User` objects into the table, based on the primary key. Returns the key of the newly inserted `User`.
  """
  user_upsertMany(
    """
    List of data objects to insert or update if it already exists.
    """
    data: [User_Data!]!
  ): [User_KeyOutput!]! @fdc_generated(from: "User", purpose: UPSERT_MULTIPLE)
  """
  ✨ Insert or update `Workspace` objects into the table, based on the primary key. Returns the key of the newly inserted `Workspace`.
  """
  workspace_upsertMany(
    """
    List of data objects to insert or update if it already exists.
    """
    data: [Workspace_Data!]!
  ): [Workspace_KeyOutput!]! @fdc_generated(from: "Workspace", purpose: UPSERT_MULTIPLE)
  """
  ✨ Insert or update `WorkspaceInvitation` objects into the table, based on the primary key. Returns the key of the newly inserted `WorkspaceInvitation`.
  """
  workspaceInvitation_upsertMany(
    """
    List of data objects to insert or update if it already exists.
    """
    data: [WorkspaceInvitation_Data!]!
  ): [WorkspaceInvitation_KeyOutput!]! @fdc_generated(from: "WorkspaceInvitation", purpose: UPSERT_MULTIPLE)
  """
  ✨ Insert or update `WorkspaceMember` objects into the table, based on the primary key. Returns the key of the newly inserted `WorkspaceMember`.
  """
  workspaceMember_upsertMany(
    """
    List of data objects to insert or update if it already exists.
    """
    data: [WorkspaceMember_Data!]!
  ): [WorkspaceMember_KeyOutput!]! @fdc_generated(from: "WorkspaceMember", purpose: UPSERT_MULTIPLE)
  """
  ✨ Insert or update `WorkspaceUser` objects into the table, based on the primary key. Returns the key of the newly inserted `WorkspaceUser`.
  """
  workspaceUser_upsertMany(
    """
    List of data objects to insert or update if it already exists.
    """
    data: [WorkspaceUser_Data!]!
  ): [WorkspaceUser_KeyOutput!]! @fdc_generated(from: "WorkspaceUser", purpose: UPSERT_MULTIPLE)
  """
  ✨ Update a single `BusinessProfile` based on `id`, `key` or `first`, setting columns specified in `data`. Returns `null` if not found.
  """
  businessProfile_update(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: BusinessProfile_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: BusinessProfile_FirstRow

    """
    Data object containing fields to be updated.
    """
    data: BusinessProfile_Data!
  ): BusinessProfile_KeyOutput @fdc_generated(from: "BusinessProfile", purpose: UPDATE_SINGLE)
  """
  ✨ Update a single `LLMKey` based on `id`, `key` or `first`, setting columns specified in `data`. Returns `null` if not found.
  """
  lLMKey_update(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: LLMKey_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: LLMKey_FirstRow

    """
    Data object containing fields to be updated.
    """
    data: LLMKey_Data!
  ): LLMKey_KeyOutput @fdc_generated(from: "LLMKey", purpose: UPDATE_SINGLE)
  """
  ✨ Update a single `PartnerPreferences` based on `id`, `key` or `first`, setting columns specified in `data`. Returns `null` if not found.
  """
  partnerPreferences_update(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: PartnerPreferences_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: PartnerPreferences_FirstRow

    """
    Data object containing fields to be updated.
    """
    data: PartnerPreferences_Data!
  ): PartnerPreferences_KeyOutput @fdc_generated(from: "PartnerPreferences", purpose: UPDATE_SINGLE)
  """
  ✨ Update a single `Profile` based on `id`, `key` or `first`, setting columns specified in `data`. Returns `null` if not found.
  """
  profile_update(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Profile_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Profile_FirstRow

    """
    Data object containing fields to be updated.
    """
    data: Profile_Data!
  ): Profile_KeyOutput @fdc_generated(from: "Profile", purpose: UPDATE_SINGLE)
  """
  ✨ Update a single `User` based on `id`, `key` or `first`, setting columns specified in `data`. Returns `null` if not found.
  """
  user_update(
    """
    The unique ID of the object.
    """
    id: String

    """
    ✨ `_expr` server value variant of `id` (The unique ID of the object.)
    """
    id_expr: String_Expr

    """
    The key used to identify the object.
    """
    key: User_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: User_FirstRow

    """
    Data object containing fields to be updated.
    """
    data: User_Data!
  ): User_KeyOutput @fdc_generated(from: "User", purpose: UPDATE_SINGLE)
  """
  ✨ Update a single `Workspace` based on `id`, `key` or `first`, setting columns specified in `data`. Returns `null` if not found.
  """
  workspace_update(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Workspace_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Workspace_FirstRow

    """
    Data object containing fields to be updated.
    """
    data: Workspace_Data!
  ): Workspace_KeyOutput @fdc_generated(from: "Workspace", purpose: UPDATE_SINGLE)
  """
  ✨ Update a single `WorkspaceInvitation` based on `id`, `key` or `first`, setting columns specified in `data`. Returns `null` if not found.
  """
  workspaceInvitation_update(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: WorkspaceInvitation_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: WorkspaceInvitation_FirstRow

    """
    Data object containing fields to be updated.
    """
    data: WorkspaceInvitation_Data!
  ): WorkspaceInvitation_KeyOutput @fdc_generated(from: "WorkspaceInvitation", purpose: UPDATE_SINGLE)
  """
  ✨ Update a single `WorkspaceMember` based on `id`, `key` or `first`, setting columns specified in `data`. Returns `null` if not found.
  """
  workspaceMember_update(
    """
    The key used to identify the object.
    """
    key: WorkspaceMember_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: WorkspaceMember_FirstRow

    """
    Data object containing fields to be updated.
    """
    data: WorkspaceMember_Data!
  ): WorkspaceMember_KeyOutput @fdc_generated(from: "WorkspaceMember", purpose: UPDATE_SINGLE)
  """
  ✨ Update a single `WorkspaceUser` based on `id`, `key` or `first`, setting columns specified in `data`. Returns `null` if not found.
  """
  workspaceUser_update(
    """
    The key used to identify the object.
    """
    key: WorkspaceUser_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: WorkspaceUser_FirstRow

    """
    Data object containing fields to be updated.
    """
    data: WorkspaceUser_Data!
  ): WorkspaceUser_KeyOutput @fdc_generated(from: "WorkspaceUser", purpose: UPDATE_SINGLE)
  """
  ✨ Update `BusinessProfile` objects matching `where` conditions (or `all`, if true) according to `data`. Returns the number of rows updated.
  """
  businessProfile_updateMany(
    """
    Filter condition to specify which rows to update.
    """
    where: BusinessProfile_Filter

    """
    Set to true to update all rows.
    """
    all: Boolean = false

    """
    Data object containing fields to update.
    """
    data: BusinessProfile_Data!
  ): Int! @fdc_generated(from: "BusinessProfile", purpose: UPDATE_MULTIPLE)
  """
  ✨ Update `LLMKey` objects matching `where` conditions (or `all`, if true) according to `data`. Returns the number of rows updated.
  """
  lLMKey_updateMany(
    """
    Filter condition to specify which rows to update.
    """
    where: LLMKey_Filter

    """
    Set to true to update all rows.
    """
    all: Boolean = false

    """
    Data object containing fields to update.
    """
    data: LLMKey_Data!
  ): Int! @fdc_generated(from: "LLMKey", purpose: UPDATE_MULTIPLE)
  """
  ✨ Update `PartnerPreferences` objects matching `where` conditions (or `all`, if true) according to `data`. Returns the number of rows updated.
  """
  partnerPreferences_updateMany(
    """
    Filter condition to specify which rows to update.
    """
    where: PartnerPreferences_Filter

    """
    Set to true to update all rows.
    """
    all: Boolean = false

    """
    Data object containing fields to update.
    """
    data: PartnerPreferences_Data!
  ): Int! @fdc_generated(from: "PartnerPreferences", purpose: UPDATE_MULTIPLE)
  """
  ✨ Update `Profile` objects matching `where` conditions (or `all`, if true) according to `data`. Returns the number of rows updated.
  """
  profile_updateMany(
    """
    Filter condition to specify which rows to update.
    """
    where: Profile_Filter

    """
    Set to true to update all rows.
    """
    all: Boolean = false

    """
    Data object containing fields to update.
    """
    data: Profile_Data!
  ): Int! @fdc_generated(from: "Profile", purpose: UPDATE_MULTIPLE)
  """
  ✨ Update `User` objects matching `where` conditions (or `all`, if true) according to `data`. Returns the number of rows updated.
  """
  user_updateMany(
    """
    Filter condition to specify which rows to update.
    """
    where: User_Filter

    """
    Set to true to update all rows.
    """
    all: Boolean = false

    """
    Data object containing fields to update.
    """
    data: User_Data!
  ): Int! @fdc_generated(from: "User", purpose: UPDATE_MULTIPLE)
  """
  ✨ Update `Workspace` objects matching `where` conditions (or `all`, if true) according to `data`. Returns the number of rows updated.
  """
  workspace_updateMany(
    """
    Filter condition to specify which rows to update.
    """
    where: Workspace_Filter

    """
    Set to true to update all rows.
    """
    all: Boolean = false

    """
    Data object containing fields to update.
    """
    data: Workspace_Data!
  ): Int! @fdc_generated(from: "Workspace", purpose: UPDATE_MULTIPLE)
  """
  ✨ Update `WorkspaceInvitation` objects matching `where` conditions (or `all`, if true) according to `data`. Returns the number of rows updated.
  """
  workspaceInvitation_updateMany(
    """
    Filter condition to specify which rows to update.
    """
    where: WorkspaceInvitation_Filter

    """
    Set to true to update all rows.
    """
    all: Boolean = false

    """
    Data object containing fields to update.
    """
    data: WorkspaceInvitation_Data!
  ): Int! @fdc_generated(from: "WorkspaceInvitation", purpose: UPDATE_MULTIPLE)
  """
  ✨ Update `WorkspaceMember` objects matching `where` conditions (or `all`, if true) according to `data`. Returns the number of rows updated.
  """
  workspaceMember_updateMany(
    """
    Filter condition to specify which rows to update.
    """
    where: WorkspaceMember_Filter

    """
    Set to true to update all rows.
    """
    all: Boolean = false

    """
    Data object containing fields to update.
    """
    data: WorkspaceMember_Data!
  ): Int! @fdc_generated(from: "WorkspaceMember", purpose: UPDATE_MULTIPLE)
  """
  ✨ Update `WorkspaceUser` objects matching `where` conditions (or `all`, if true) according to `data`. Returns the number of rows updated.
  """
  workspaceUser_updateMany(
    """
    Filter condition to specify which rows to update.
    """
    where: WorkspaceUser_Filter

    """
    Set to true to update all rows.
    """
    all: Boolean = false

    """
    Data object containing fields to update.
    """
    data: WorkspaceUser_Data!
  ): Int! @fdc_generated(from: "WorkspaceUser", purpose: UPDATE_MULTIPLE)
  """
  ✨ Delete a single `BusinessProfile` based on `id`, `key` or `first` and return its key (or `null` if not found).
  """
  businessProfile_delete(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: BusinessProfile_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: BusinessProfile_FirstRow
  ): BusinessProfile_KeyOutput @fdc_generated(from: "BusinessProfile", purpose: DELETE_SINGLE)
  """
  ✨ Delete a single `LLMKey` based on `id`, `key` or `first` and return its key (or `null` if not found).
  """
  lLMKey_delete(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: LLMKey_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: LLMKey_FirstRow
  ): LLMKey_KeyOutput @fdc_generated(from: "LLMKey", purpose: DELETE_SINGLE)
  """
  ✨ Delete a single `PartnerPreferences` based on `id`, `key` or `first` and return its key (or `null` if not found).
  """
  partnerPreferences_delete(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: PartnerPreferences_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: PartnerPreferences_FirstRow
  ): PartnerPreferences_KeyOutput @fdc_generated(from: "PartnerPreferences", purpose: DELETE_SINGLE)
  """
  ✨ Delete a single `Profile` based on `id`, `key` or `first` and return its key (or `null` if not found).
  """
  profile_delete(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Profile_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Profile_FirstRow
  ): Profile_KeyOutput @fdc_generated(from: "Profile", purpose: DELETE_SINGLE)
  """
  ✨ Delete a single `User` based on `id`, `key` or `first` and return its key (or `null` if not found).
  """
  user_delete(
    """
    The unique ID of the object.
    """
    id: String

    """
    ✨ `_expr` server value variant of `id` (The unique ID of the object.)
    """
    id_expr: String_Expr

    """
    The key used to identify the object.
    """
    key: User_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: User_FirstRow
  ): User_KeyOutput @fdc_generated(from: "User", purpose: DELETE_SINGLE)
  """
  ✨ Delete a single `Workspace` based on `id`, `key` or `first` and return its key (or `null` if not found).
  """
  workspace_delete(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Workspace_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Workspace_FirstRow
  ): Workspace_KeyOutput @fdc_generated(from: "Workspace", purpose: DELETE_SINGLE)
  """
  ✨ Delete a single `WorkspaceInvitation` based on `id`, `key` or `first` and return its key (or `null` if not found).
  """
  workspaceInvitation_delete(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: WorkspaceInvitation_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: WorkspaceInvitation_FirstRow
  ): WorkspaceInvitation_KeyOutput @fdc_generated(from: "WorkspaceInvitation", purpose: DELETE_SINGLE)
  """
  ✨ Delete a single `WorkspaceMember` based on `id`, `key` or `first` and return its key (or `null` if not found).
  """
  workspaceMember_delete(
    """
    The key used to identify the object.
    """
    key: WorkspaceMember_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: WorkspaceMember_FirstRow
  ): WorkspaceMember_KeyOutput @fdc_generated(from: "WorkspaceMember", purpose: DELETE_SINGLE)
  """
  ✨ Delete a single `WorkspaceUser` based on `id`, `key` or `first` and return its key (or `null` if not found).
  """
  workspaceUser_delete(
    """
    The key used to identify the object.
    """
    key: WorkspaceUser_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: WorkspaceUser_FirstRow
  ): WorkspaceUser_KeyOutput @fdc_generated(from: "WorkspaceUser", purpose: DELETE_SINGLE)
  """
  ✨ Delete `BusinessProfile` objects matching `where` conditions (or `all`, if true). Returns the number of rows deleted.
  """
  businessProfile_deleteMany(
    """
    Filter condition to specify which rows to delete.
    """
    where: BusinessProfile_Filter

    """
    Set to true to delete all rows.
    """
    all: Boolean = false
  ): Int! @fdc_generated(from: "BusinessProfile", purpose: DELETE_MULTIPLE)
  """
  ✨ Delete `LLMKey` objects matching `where` conditions (or `all`, if true). Returns the number of rows deleted.
  """
  lLMKey_deleteMany(
    """
    Filter condition to specify which rows to delete.
    """
    where: LLMKey_Filter

    """
    Set to true to delete all rows.
    """
    all: Boolean = false
  ): Int! @fdc_generated(from: "LLMKey", purpose: DELETE_MULTIPLE)
  """
  ✨ Delete `PartnerPreferences` objects matching `where` conditions (or `all`, if true). Returns the number of rows deleted.
  """
  partnerPreferences_deleteMany(
    """
    Filter condition to specify which rows to delete.
    """
    where: PartnerPreferences_Filter

    """
    Set to true to delete all rows.
    """
    all: Boolean = false
  ): Int! @fdc_generated(from: "PartnerPreferences", purpose: DELETE_MULTIPLE)
  """
  ✨ Delete `Profile` objects matching `where` conditions (or `all`, if true). Returns the number of rows deleted.
  """
  profile_deleteMany(
    """
    Filter condition to specify which rows to delete.
    """
    where: Profile_Filter

    """
    Set to true to delete all rows.
    """
    all: Boolean = false
  ): Int! @fdc_generated(from: "Profile", purpose: DELETE_MULTIPLE)
  """
  ✨ Delete `User` objects matching `where` conditions (or `all`, if true). Returns the number of rows deleted.
  """
  user_deleteMany(
    """
    Filter condition to specify which rows to delete.
    """
    where: User_Filter

    """
    Set to true to delete all rows.
    """
    all: Boolean = false
  ): Int! @fdc_generated(from: "User", purpose: DELETE_MULTIPLE)
  """
  ✨ Delete `Workspace` objects matching `where` conditions (or `all`, if true). Returns the number of rows deleted.
  """
  workspace_deleteMany(
    """
    Filter condition to specify which rows to delete.
    """
    where: Workspace_Filter

    """
    Set to true to delete all rows.
    """
    all: Boolean = false
  ): Int! @fdc_generated(from: "Workspace", purpose: DELETE_MULTIPLE)
  """
  ✨ Delete `WorkspaceInvitation` objects matching `where` conditions (or `all`, if true). Returns the number of rows deleted.
  """
  workspaceInvitation_deleteMany(
    """
    Filter condition to specify which rows to delete.
    """
    where: WorkspaceInvitation_Filter

    """
    Set to true to delete all rows.
    """
    all: Boolean = false
  ): Int! @fdc_generated(from: "WorkspaceInvitation", purpose: DELETE_MULTIPLE)
  """
  ✨ Delete `WorkspaceMember` objects matching `where` conditions (or `all`, if true). Returns the number of rows deleted.
  """
  workspaceMember_deleteMany(
    """
    Filter condition to specify which rows to delete.
    """
    where: WorkspaceMember_Filter

    """
    Set to true to delete all rows.
    """
    all: Boolean = false
  ): Int! @fdc_generated(from: "WorkspaceMember", purpose: DELETE_MULTIPLE)
  """
  ✨ Delete `WorkspaceUser` objects matching `where` conditions (or `all`, if true). Returns the number of rows deleted.
  """
  workspaceUser_deleteMany(
    """
    Filter condition to specify which rows to delete.
    """
    where: WorkspaceUser_Filter

    """
    Set to true to delete all rows.
    """
    all: Boolean = false
  ): Int! @fdc_generated(from: "WorkspaceUser", purpose: DELETE_MULTIPLE)
}
