extend type BusinessProfile {
  """
  Implicit metadata field that cannot be written. It provides extra information about query results.
  """
  _metadata: _Metadata @fdc_generated(from: "BusinessProfile", purpose: METADATA_FIELD)
  """
  ✨ Count the number of rows in the `BusinessProfile` table.
  """
  _count: Int! @fdc_generated(from: "BusinessProfile", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `BusinessProfile` table where the `createdAt` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  createdAt_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "BusinessProfile.createdAt", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `BusinessProfile` table where the `descriptionEmbedding` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  descriptionEmbedding_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "BusinessProfile.descriptionEmbedding", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `BusinessProfile` table where the `description` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  description_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "BusinessProfile.description", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `BusinessProfile` table where the `employeeCount` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  employeeCount_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "BusinessProfile.employeeCount", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `BusinessProfile` table where the `id` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  id_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "BusinessProfile.id", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `BusinessProfile` table where the `industry` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  industry_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "BusinessProfile.industry", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `BusinessProfile` table where the `location` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  location_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "BusinessProfile.location", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `BusinessProfile` table where the `name` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  name_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "BusinessProfile.name", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `BusinessProfile` table where the `updatedAt` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  updatedAt_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "BusinessProfile.updatedAt", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `BusinessProfile` table where the `website` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  website_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "BusinessProfile.website", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `BusinessProfile` table where the `workspaceId` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  workspaceId_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "BusinessProfile.workspaceId", purpose: QUERY_COUNT)
  """
  ✨ Sum the `employeeCount` field in the `BusinessProfile` table.
  """
  employeeCount_sum(
    """
    Set to true to sum the distinct values.
    """
    distinct: Boolean = false
  ): Int @fdc_generated(from: "BusinessProfile.employeeCount", purpose: QUERY_SUM)
  """
  ✨ Average the `employeeCount` field in the `BusinessProfile` table.
  """
  employeeCount_avg(
    """
    Set to true to average the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "BusinessProfile.employeeCount", purpose: QUERY_AVG)
  """
  ✨ Minimum of the `createdAt` field in the `BusinessProfile` table.
  """
  createdAt_min: Timestamp @fdc_generated(from: "BusinessProfile.createdAt", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `employeeCount` field in the `BusinessProfile` table.
  """
  employeeCount_min: Int @fdc_generated(from: "BusinessProfile.employeeCount", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `updatedAt` field in the `BusinessProfile` table.
  """
  updatedAt_min: Timestamp @fdc_generated(from: "BusinessProfile.updatedAt", purpose: QUERY_MIN)
  """
  ✨ Maximum of the `createdAt` field in the `BusinessProfile` table.
  """
  createdAt_max: Timestamp @fdc_generated(from: "BusinessProfile.createdAt", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `employeeCount` field in the `BusinessProfile` table.
  """
  employeeCount_max: Int @fdc_generated(from: "BusinessProfile.employeeCount", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `updatedAt` field in the `BusinessProfile` table.
  """
  updatedAt_max: Timestamp @fdc_generated(from: "BusinessProfile.updatedAt", purpose: QUERY_MAX)
}
extend type PartnerPreferences {
  """
  Implicit metadata field that cannot be written. It provides extra information about query results.
  """
  _metadata: _Metadata @fdc_generated(from: "PartnerPreferences", purpose: METADATA_FIELD)
  """
  ✨ Count the number of rows in the `PartnerPreferences` table.
  """
  _count: Int! @fdc_generated(from: "PartnerPreferences", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `PartnerPreferences` table where the `combinedEmbedding` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  combinedEmbedding_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "PartnerPreferences.combinedEmbedding", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `PartnerPreferences` table where the `createdAt` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  createdAt_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "PartnerPreferences.createdAt", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `PartnerPreferences` table where the `id` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  id_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "PartnerPreferences.id", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `PartnerPreferences` table where the `maxEmployeeCount` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  maxEmployeeCount_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "PartnerPreferences.maxEmployeeCount", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `PartnerPreferences` table where the `minEmployeeCount` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  minEmployeeCount_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "PartnerPreferences.minEmployeeCount", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `PartnerPreferences` table where the `updatedAt` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  updatedAt_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "PartnerPreferences.updatedAt", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `PartnerPreferences` table where the `workspaceId` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  workspaceId_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "PartnerPreferences.workspaceId", purpose: QUERY_COUNT)
  """
  ✨ Sum the `maxEmployeeCount` field in the `PartnerPreferences` table.
  """
  maxEmployeeCount_sum(
    """
    Set to true to sum the distinct values.
    """
    distinct: Boolean = false
  ): Int @fdc_generated(from: "PartnerPreferences.maxEmployeeCount", purpose: QUERY_SUM)
  """
  ✨ Sum the `minEmployeeCount` field in the `PartnerPreferences` table.
  """
  minEmployeeCount_sum(
    """
    Set to true to sum the distinct values.
    """
    distinct: Boolean = false
  ): Int @fdc_generated(from: "PartnerPreferences.minEmployeeCount", purpose: QUERY_SUM)
  """
  ✨ Average the `maxEmployeeCount` field in the `PartnerPreferences` table.
  """
  maxEmployeeCount_avg(
    """
    Set to true to average the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "PartnerPreferences.maxEmployeeCount", purpose: QUERY_AVG)
  """
  ✨ Average the `minEmployeeCount` field in the `PartnerPreferences` table.
  """
  minEmployeeCount_avg(
    """
    Set to true to average the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "PartnerPreferences.minEmployeeCount", purpose: QUERY_AVG)
  """
  ✨ Minimum of the `createdAt` field in the `PartnerPreferences` table.
  """
  createdAt_min: Timestamp @fdc_generated(from: "PartnerPreferences.createdAt", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `maxEmployeeCount` field in the `PartnerPreferences` table.
  """
  maxEmployeeCount_min: Int @fdc_generated(from: "PartnerPreferences.maxEmployeeCount", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `minEmployeeCount` field in the `PartnerPreferences` table.
  """
  minEmployeeCount_min: Int @fdc_generated(from: "PartnerPreferences.minEmployeeCount", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `updatedAt` field in the `PartnerPreferences` table.
  """
  updatedAt_min: Timestamp @fdc_generated(from: "PartnerPreferences.updatedAt", purpose: QUERY_MIN)
  """
  ✨ Maximum of the `createdAt` field in the `PartnerPreferences` table.
  """
  createdAt_max: Timestamp @fdc_generated(from: "PartnerPreferences.createdAt", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `maxEmployeeCount` field in the `PartnerPreferences` table.
  """
  maxEmployeeCount_max: Int @fdc_generated(from: "PartnerPreferences.maxEmployeeCount", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `minEmployeeCount` field in the `PartnerPreferences` table.
  """
  minEmployeeCount_max: Int @fdc_generated(from: "PartnerPreferences.minEmployeeCount", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `updatedAt` field in the `PartnerPreferences` table.
  """
  updatedAt_max: Timestamp @fdc_generated(from: "PartnerPreferences.updatedAt", purpose: QUERY_MAX)
}
extend type Profile {
  """
  Implicit metadata field that cannot be written. It provides extra information about query results.
  """
  _metadata: _Metadata @fdc_generated(from: "Profile", purpose: METADATA_FIELD)
  """
  ✨ Count the number of rows in the `Profile` table.
  """
  _count: Int! @fdc_generated(from: "Profile", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Profile` table where the `avatarUrl` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  avatarUrl_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Profile.avatarUrl", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Profile` table where the `bioEmbedding` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  bioEmbedding_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Profile.bioEmbedding", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Profile` table where the `bio` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  bio_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Profile.bio", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Profile` table where the `createdAt` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  createdAt_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Profile.createdAt", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Profile` table where the `id` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  id_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Profile.id", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Profile` table where the `isDefault` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  isDefault_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Profile.isDefault", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Profile` table where the `name` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  name_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Profile.name", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Profile` table where the `updatedAt` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  updatedAt_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Profile.updatedAt", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Profile` table where the `userId` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  userId_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Profile.userId", purpose: QUERY_COUNT)
  """
  ✨ Minimum of the `createdAt` field in the `Profile` table.
  """
  createdAt_min: Timestamp @fdc_generated(from: "Profile.createdAt", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `updatedAt` field in the `Profile` table.
  """
  updatedAt_min: Timestamp @fdc_generated(from: "Profile.updatedAt", purpose: QUERY_MIN)
  """
  ✨ Maximum of the `createdAt` field in the `Profile` table.
  """
  createdAt_max: Timestamp @fdc_generated(from: "Profile.createdAt", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `updatedAt` field in the `Profile` table.
  """
  updatedAt_max: Timestamp @fdc_generated(from: "Profile.updatedAt", purpose: QUERY_MAX)
}
extend type User {
  """
  Implicit metadata field that cannot be written. It provides extra information about query results.
  """
  _metadata: _Metadata @fdc_generated(from: "User", purpose: METADATA_FIELD)
  """
  ✨ Count the number of rows in the `User` table.
  """
  _count: Int! @fdc_generated(from: "User", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `User` table where the `createdAt` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  createdAt_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "User.createdAt", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `User` table where the `displayName` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  displayName_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "User.displayName", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `User` table where the `email` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  email_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "User.email", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `User` table where the `id` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  id_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "User.id", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `User` table where the `photoUrl` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  photoUrl_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "User.photoUrl", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `User` table where the `updatedAt` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  updatedAt_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "User.updatedAt", purpose: QUERY_COUNT)
  """
  ✨ Minimum of the `createdAt` field in the `User` table.
  """
  createdAt_min: Timestamp @fdc_generated(from: "User.createdAt", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `updatedAt` field in the `User` table.
  """
  updatedAt_min: Timestamp @fdc_generated(from: "User.updatedAt", purpose: QUERY_MIN)
  """
  ✨ Maximum of the `createdAt` field in the `User` table.
  """
  createdAt_max: Timestamp @fdc_generated(from: "User.createdAt", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `updatedAt` field in the `User` table.
  """
  updatedAt_max: Timestamp @fdc_generated(from: "User.updatedAt", purpose: QUERY_MAX)
}
extend type Workspace {
  """
  Implicit metadata field that cannot be written. It provides extra information about query results.
  """
  _metadata: _Metadata @fdc_generated(from: "Workspace", purpose: METADATA_FIELD)
  """
  ✨ Count the number of rows in the `Workspace` table.
  """
  _count: Int! @fdc_generated(from: "Workspace", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Workspace` table where the `createdAt` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  createdAt_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Workspace.createdAt", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Workspace` table where the `createdBy` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  createdBy_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Workspace.createdBy", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Workspace` table where the `description` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  description_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Workspace.description", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Workspace` table where the `id` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  id_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Workspace.id", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Workspace` table where the `logoUrl` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  logoUrl_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Workspace.logoUrl", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Workspace` table where the `name` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  name_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Workspace.name", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Workspace` table where the `updatedAt` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  updatedAt_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Workspace.updatedAt", purpose: QUERY_COUNT)
  """
  ✨ Minimum of the `createdAt` field in the `Workspace` table.
  """
  createdAt_min: Timestamp @fdc_generated(from: "Workspace.createdAt", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `updatedAt` field in the `Workspace` table.
  """
  updatedAt_min: Timestamp @fdc_generated(from: "Workspace.updatedAt", purpose: QUERY_MIN)
  """
  ✨ Maximum of the `createdAt` field in the `Workspace` table.
  """
  createdAt_max: Timestamp @fdc_generated(from: "Workspace.createdAt", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `updatedAt` field in the `Workspace` table.
  """
  updatedAt_max: Timestamp @fdc_generated(from: "Workspace.updatedAt", purpose: QUERY_MAX)
}
extend type WorkspaceInvitation {
  """
  Implicit metadata field that cannot be written. It provides extra information about query results.
  """
  _metadata: _Metadata @fdc_generated(from: "WorkspaceInvitation", purpose: METADATA_FIELD)
  """
  ✨ Count the number of rows in the `WorkspaceInvitation` table.
  """
  _count: Int! @fdc_generated(from: "WorkspaceInvitation", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `WorkspaceInvitation` table where the `createdAt` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  createdAt_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "WorkspaceInvitation.createdAt", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `WorkspaceInvitation` table where the `email` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  email_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "WorkspaceInvitation.email", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `WorkspaceInvitation` table where the `expiresAt` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  expiresAt_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "WorkspaceInvitation.expiresAt", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `WorkspaceInvitation` table where the `id` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  id_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "WorkspaceInvitation.id", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `WorkspaceInvitation` table where the `invitedBy` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  invitedBy_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "WorkspaceInvitation.invitedBy", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `WorkspaceInvitation` table where the `role` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  role_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "WorkspaceInvitation.role", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `WorkspaceInvitation` table where the `status` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  status_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "WorkspaceInvitation.status", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `WorkspaceInvitation` table where the `workspaceId` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  workspaceId_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "WorkspaceInvitation.workspaceId", purpose: QUERY_COUNT)
  """
  ✨ Minimum of the `createdAt` field in the `WorkspaceInvitation` table.
  """
  createdAt_min: Timestamp @fdc_generated(from: "WorkspaceInvitation.createdAt", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `expiresAt` field in the `WorkspaceInvitation` table.
  """
  expiresAt_min: Timestamp @fdc_generated(from: "WorkspaceInvitation.expiresAt", purpose: QUERY_MIN)
  """
  ✨ Maximum of the `createdAt` field in the `WorkspaceInvitation` table.
  """
  createdAt_max: Timestamp @fdc_generated(from: "WorkspaceInvitation.createdAt", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `expiresAt` field in the `WorkspaceInvitation` table.
  """
  expiresAt_max: Timestamp @fdc_generated(from: "WorkspaceInvitation.expiresAt", purpose: QUERY_MAX)
}
extend type WorkspaceMember {
  """
  Implicit metadata field that cannot be written. It provides extra information about query results.
  """
  _metadata: _Metadata @fdc_generated(from: "WorkspaceMember", purpose: METADATA_FIELD)
  """
  ✨ Count the number of rows in the `WorkspaceMember` table.
  """
  _count: Int! @fdc_generated(from: "WorkspaceMember", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `WorkspaceMember` table where the `joinedAt` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  joinedAt_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "WorkspaceMember.joinedAt", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `WorkspaceMember` table where the `profileId` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  profileId_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "WorkspaceMember.profileId", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `WorkspaceMember` table where the `role` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  role_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "WorkspaceMember.role", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `WorkspaceMember` table where the `userId` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  userId_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "WorkspaceMember.userId", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `WorkspaceMember` table where the `workspaceId` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  workspaceId_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "WorkspaceMember.workspaceId", purpose: QUERY_COUNT)
  """
  ✨ Minimum of the `joinedAt` field in the `WorkspaceMember` table.
  """
  joinedAt_min: Timestamp @fdc_generated(from: "WorkspaceMember.joinedAt", purpose: QUERY_MIN)
  """
  ✨ Maximum of the `joinedAt` field in the `WorkspaceMember` table.
  """
  joinedAt_max: Timestamp @fdc_generated(from: "WorkspaceMember.joinedAt", purpose: QUERY_MAX)
}
