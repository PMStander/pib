# User queries
query GetCurrentUser @auth(level: USER) {
  user(key: {id_expr: "auth.uid"}) {
    id
    email
    displayName
    photoUrl
    createdAt
    updatedAt
  }
}

query GetUser($id: String!) @auth(level: USER) {
  user(key: {id: $id}) {
    id
    email
    displayName
    photoUrl
    createdAt
    updatedAt
  }
}

query GetUserProfiles @auth(level: USER) {
  profiles(where: {userId: {eq_expr: "auth.uid"}}) {
    id
    userId
    name
    bio
    avatarUrl
    skills
    interests
    isDefault
    createdAt
    updatedAt
  }
}

# Workspace queries
query GetUserWorkspaces @auth(level: USER) {
  workspaceMembers(where: {userId: {eq_expr: "auth.uid"}}) {
    workspaceId
    # Note: We can't directly query the workspace relationship
    # We'll need to fetch the workspace separately using the workspaceId
  }
}

query GetWorkspace($id: UUID!) @auth(level: USER) {
  workspace(key: {id: $id}) {
    id
    name
    description
    logoUrl
    createdBy
    createdAt
    updatedAt
  }
}

query GetWorkspaceMembers($workspaceId: UUID!) @auth(level: USER) {
  workspaceMembers(where: {workspaceId: {eq: $workspaceId}}) {
    workspaceId
    userId
    profileId
    role
    joinedAt
    # Note: We can't directly query the user and profile relationships
    # We'll need to fetch them separately using the userId and profileId
  }
}

query GetBusinessProfile($workspaceId: UUID!) @auth(level: USER) {
  businessProfile(first: {where: {workspaceId: {eq: $workspaceId}}}) {
    id
    workspaceId
    name
    industry
    description
    location
    website
    employeeCount
    createdAt
    updatedAt
  }
}

query GetPartnerPreferences($workspaceId: UUID!) @auth(level: USER) {
  partnerPreferences(first: {where: {workspaceId: {eq: $workspaceId}}}) {
    id
    workspaceId
    industries
    locations
    minEmployeeCount
    maxEmployeeCount
    skillsNeeded
    createdAt
    updatedAt
  }
}

query GetWorkspaceInvitations($workspaceId: UUID!) @auth(level: USER) {
  workspaceInvitations(where: {workspaceId: {eq: $workspaceId}}) {
    id
    workspaceId
    email
    role
    invitedBy
    status
    createdAt
    expiresAt
  }
}

query GetPendingInvitationsByEmail($email: String!) @auth(level: USER) {
  workspaceInvitations(where: {
    _and: [
      {email: {eq: $email}},
      {status: {eq: "pending"}}
    ]
  }) {
    id
    workspaceId
    email
    role
    invitedBy
    status
    createdAt
    expiresAt
    # Note: We can't directly query the workspace relationship
    # We'll need to fetch the workspace separately using the workspaceId
  }
}
