# User queries

query GetAllUsers @auth(level: USER) {
  users {
    id
    email
    displayName
    photoUrl
    createdAt
    updatedAt
  }
}

query GetCurrentUser @auth(level: USER) {
  user(key: {id_expr: "auth.uid"}) {
    id
    email
    displayName
    photoUrl
    createdAt
    updatedAt
  }
}

# Vector search queries
query SearchProfilesByBio($searchText: String!, $limit: Int = 5) @auth(level: USER) {
  profiles_bioEmbedding_similarity(
    compare_embed: {model: "textembedding-gecko@003", text: $searchText},
    method: COSINE,
    limit: $limit
  ) {
    id
    userId
    name
    bio
    skills
    interests
    avatarUrl
  }
}

query SearchBusinessProfilesByDescription($searchText: String!, $limit: Int = 5) @auth(level: USER) {
  businessProfiles_descriptionEmbedding_similarity(
    compare_embed: {model: "textembedding-gecko@003", text: $searchText},
    method: COSINE,
    limit: $limit
  ) {
    id
    workspaceId
    name
    industry
    description
    location
    website
    employeeCount
  }
}

query MatchProfileToBusinesses($profileId: UUID!, $limit: Int = 5) @auth(level: USER) {
  profile(key: {id: $profileId}) {
    id
    name
    bio
    # Removed bioEmbedding field as vector type is not supported
  }
}

query BusinessProfilesBySimilarity($bioText: String!, $limit: Int = 5) @auth(level: USER) {
  businessProfiles_descriptionEmbedding_similarity(
    compare_embed: {model: "textembedding-gecko@003", text: $bioText},
    method: COSINE,
    limit: $limit
  ) {
    id
    workspaceId
    name
    industry
    description
    location
    website
    employeeCount
  }
}

query MatchBusinessToProfiles($businessProfileId: UUID!, $limit: Int = 5) @auth(level: USER) {
  businessProfile(key: {id: $businessProfileId}) {
    id
    name
    description
    # Removed descriptionEmbedding field as vector type is not supported
  }
}

query ProfilesBySimilarity($descriptionText: String!, $limit: Int = 5) @auth(level: USER) {
  profiles_bioEmbedding_similarity(
    compare_embed: {model: "textembedding-gecko@003", text: $descriptionText},
    method: COSINE,
    limit: $limit
  ) {
    id
    userId
    name
    bio
    skills
    interests
    avatarUrl
  }
}

query SearchPartnerPreferences($searchText: String!, $limit: Int = 5) @auth(level: USER) {
  partnerPreferencess_combinedEmbedding_similarity(
    compare_embed: {model: "textembedding-gecko@003", text: $searchText},
    method: COSINE,
    limit: $limit
  ) {
    id
    workspaceId
    industries
    locations
    minEmployeeCount
    maxEmployeeCount
    skillsNeeded
  }
}

query GetUser($id: String!) @auth(level: USER) {
  user(key: {id: $id}) {
    id
    email
    displayName
    photoUrl
    createdAt
    updatedAt
  }
}

query GetUserProfiles @auth(level: USER) {
  profiles(where: {userId: {eq_expr: "auth.uid"}}) {
    id
    userId
    name
    bio
    avatarUrl
    skills
    interests
    isDefault
    createdAt
    updatedAt
  }
}

# Workspace queries
query GetUserWorkspaces($userId: String!) @auth(level: USER) {
  workspaceUsers(where: { user: { id: { eq: $userId } } }) {
    workspace {
      id
      name
      description
      logoUrl
      createdBy
      createdAt
      updatedAt
    }
  }
}

query GetWorkspace($id: UUID!) @auth(level: USER) {
  workspace(key: {id: $id}) {
    id
    name
    description
    logoUrl
    createdBy
    createdAt
    updatedAt
  }
}

# GetWorkspaceMembers (Using proper relationship filtering)
query GetWorkspaceMembers($workspaceId: UUID!) @auth(level: USER) {
  workspaceMembers(where: {workspace: {id: {eq: $workspaceId}}}) {
    role
    joinedAt
    user {
      id
      email
      displayName
      photoUrl
    }
    profile {
      id
      name
      avatarUrl
    }
  }
}

query GetBusinessProfile($workspaceId: UUID!) @auth(level: USER) {
  businessProfile(first: {where: {workspaceId: {eq: $workspaceId}}}) {
    id
    workspaceId
    name
    industry
    description
    location
    website
    employeeCount
    createdAt
    updatedAt
  }
}

query GetPartnerPreferences($workspaceId: UUID!) @auth(level: USER) {
  partnerPreferences(first: {where: {workspaceId: {eq: $workspaceId}}}) {
    id
    workspaceId
    industries
    locations
    minEmployeeCount
    maxEmployeeCount
    skillsNeeded
    createdAt
    updatedAt
  }
}

query GetWorkspaceInvitations($workspaceId: UUID!) @auth(level: USER) {
  workspaceInvitations(where: {workspaceId: {eq: $workspaceId}}) {
    id
    workspaceId
    email
    role
    invitedBy
    status
    createdAt
    expiresAt
  }
}

# GetPendingInvitations
query GetPendingInvitations($email: String!) @auth(level: USER) {
  workspaceInvitations(where: {
    _and: [
      {email: {eq: $email}},
      {status: {eq: "pending"}}
    ]
  }) {
    id
    email
    role
    status
    createdAt
    expiresAt
    # We'll keep the direct IDs for now since we haven't updated the schema
    # to use proper relationship objects for these fields
    workspaceId
    invitedBy
  }
}
