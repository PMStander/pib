# User mutations
mutation CreateUser(
  $email: String!,
  $displayName: String,
  $photoUrl: String
) @auth(level: USER) {
  createUser: user_insert(
    data: {
      id_expr: "auth.uid",
      email: $email,
      displayName: $displayName,
      photoUrl: $photoUrl
    }
  )
}

mutation UpdateUser(
  $displayName: String,
  $photoUrl: String
) @auth(level: USER) {
  updateUser: user_update(
    key: { id_expr: "auth.uid" },
    data: {
      displayName: $displayName,
      photoUrl: $photoUrl
    }
  )
}

# Profile mutations
mutation CreateProfile(
  $name: String!,
  $bio: String,
  $avatarUrl: String,
  $skills: [String!],
  $interests: [String!],
  $isDefault: Boolean
) @auth(level: USER) {
  createProfile: profile_insert(
    data: {
      userId_expr: "auth.uid",
      name: $name,
      bio: $bio,
      avatarUrl: $avatarUrl,
      skills: $skills,
      interests: $interests,
      isDefault: $isDefault
    }
  )
}

# Create profile with bio embedding
mutation CreateProfileWithBio(
  $name: String!,
  $bio: String!,
  $avatarUrl: String,
  $skills: [String!],
  $interests: [String!],
  $isDefault: Boolean
) @auth(level: USER) {
  createProfile: profile_insert(
    data: {
      userId_expr: "auth.uid",
      name: $name,
      bio: $bio,
      bioEmbedding_embed: {model: "textembedding-gecko@003", text: $bio},
      avatarUrl: $avatarUrl,
      skills: $skills,
      interests: $interests,
      isDefault: $isDefault
    }
  )
}

mutation UpdateProfile(
  $id: UUID!,
  $name: String,
  $bio: String,
  $avatarUrl: String,
  $skills: [String!],
  $interests: [String!],
  $isDefault: Boolean
) @auth(level: USER) {
  updateProfile: profile_update(
    key: { id: $id },
    data: {
      name: $name,
      bio: $bio,
      avatarUrl: $avatarUrl,
      skills: $skills,
      interests: $interests,
      isDefault: $isDefault,
      updatedAt_expr: "request.time"
    }
  )
}

# Update profile with bio embedding
mutation UpdateProfileWithBio(
  $id: UUID!,
  $name: String,
  $bio: String!,
  $avatarUrl: String,
  $skills: [String!],
  $interests: [String!],
  $isDefault: Boolean
) @auth(level: USER) {
  updateProfile: profile_update(
    key: { id: $id },
    data: {
      name: $name,
      bio: $bio,
      bioEmbedding_embed: {model: "textembedding-gecko@003", text: $bio},
      avatarUrl: $avatarUrl,
      skills: $skills,
      interests: $interests,
      isDefault: $isDefault,
      updatedAt_expr: "request.time"
    }
  )
}

mutation DeleteProfile($id: UUID!) @auth(level: USER) {
  deleteProfile: profile_delete(key: { id: $id })
}

# Workspace mutations
mutation CreateWorkspace(
  $name: String!,
  $description: String,
  $logoUrl: String
) @auth(level: USER) {
  createWorkspace: workspace_insert(
    data: {
      name: $name,
      description: $description,
      logoUrl: $logoUrl,
      createdBy_expr: "auth.uid"
    }
  )
}

mutation UpdateWorkspace(
  $id: UUID!,
  $name: String,
  $description: String,
  $logoUrl: String
) @auth(level: USER) {
  updateWorkspace: workspace_update(
    key: { id: $id },
    data: {
      name: $name,
      description: $description,
      logoUrl: $logoUrl,
      updatedAt_expr: "request.time"
    }
  )
}

mutation DeleteWorkspace($id: UUID!) @auth(level: USER) {
  deleteWorkspace: workspace_delete(key: { id: $id })
}

# Workspace user mutations

mutation JoinWorkspaceUser(
  $workspaceId: UUID!,
  $userId: String!,
  $role: String!
) @auth(level: USER) {
  createWorkspaceUser: workspaceUser_insert(
    data: {
      workspace: { id: $workspaceId },
      user: { id: $userId },
      role: $role,
      joinedAt_expr: "request.time"
    }
  )
}

# Workspace member mutations
mutation AddWorkspaceMember(
  $workspaceId: UUID!,
  $userId: String!,
  $profileId: UUID,
  $role: String!
) @auth(level: USER) {
  addWorkspaceMember: workspaceMember_insert(
    data: {
      workspace: { id: $workspaceId },
      user: { id: $userId },
      profile: { id: $profileId },
      role: $role,
      joinedAt_expr: "request.time"
    }
  )
}

mutation UpdateWorkspaceMember(
  $workspaceId: UUID!,
  $userId: String!,
  $profileId: UUID,
  $role: String
) @auth(level: USER) {
  updateWorkspaceMember: workspaceMember_update(
    key: { workspaceId: $workspaceId, userId: $userId },
    data: {
      profile: { id: $profileId },
      role: $role
    }
  )
}

mutation RemoveWorkspaceMember(
  $workspaceId: UUID!,
  $userId: String!
) @auth(level: USER) {
  removeWorkspaceMember: workspaceMember_delete(key: { workspaceId: $workspaceId, userId: $userId })
}

# Invitation mutations
mutation InviteToWorkspace(
  $workspaceId: UUID!,
  $email: String!,
  $role: String!
) @auth(level: USER) {
  inviteToWorkspace: workspaceInvitation_insert(
    data: {
      workspaceId: $workspaceId,
      email: $email,
      role: $role,
      invitedBy_expr: "auth.uid",
      status: "pending"
    }
  )
}

mutation AcceptInvitation($invitationId: UUID!) @auth(level: USER) {
  acceptInvitation: workspaceInvitation_update(
    key: { id: $invitationId },
    data: {
      status: "accepted"
    }
  )
}

mutation DeclineInvitation($invitationId: UUID!) @auth(level: USER) {
  declineInvitation: workspaceInvitation_update(
    key: { id: $invitationId },
    data: {
      status: "declined"
    }
  )
}

# Business profile mutations
mutation CreateBusinessProfile(
  $workspaceId: UUID!,
  $name: String!,
  $industry: String,
  $description: String,
  $location: String,
  $website: String,
  $employeeCount: Int
) @auth(level: USER) {
  createBusinessProfile: businessProfile_insert(
    data: {
      workspaceId: $workspaceId,
      name: $name,
      industry: $industry,
      description: $description,
      location: $location,
      website: $website,
      employeeCount: $employeeCount
    }
  )
}

# Create business profile with description embedding
mutation CreateBusinessProfileWithDescription(
  $workspaceId: UUID!,
  $name: String!,
  $industry: String,
  $description: String!,
  $location: String,
  $website: String,
  $employeeCount: Int
) @auth(level: USER) {
  createBusinessProfile: businessProfile_insert(
    data: {
      workspaceId: $workspaceId,
      name: $name,
      industry: $industry,
      description: $description,
      descriptionEmbedding_embed: {model: "textembedding-gecko@003", text: $description},
      location: $location,
      website: $website,
      employeeCount: $employeeCount
    }
  )
}

mutation UpdateBusinessProfile(
  $id: UUID!,
  $name: String,
  $industry: String,
  $description: String,
  $location: String,
  $website: String,
  $employeeCount: Int
) @auth(level: USER) {
  updateBusinessProfile: businessProfile_update(
    key: { id: $id },
    data: {
      name: $name,
      industry: $industry,
      description: $description,
      location: $location,
      website: $website,
      employeeCount: $employeeCount,
      updatedAt_expr: "request.time"
    }
  )
}

# Update business profile with description embedding
mutation UpdateBusinessProfileWithDescription(
  $id: UUID!,
  $name: String,
  $industry: String,
  $description: String!,
  $location: String,
  $website: String,
  $employeeCount: Int
) @auth(level: USER) {
  updateBusinessProfile: businessProfile_update(
    key: { id: $id },
    data: {
      name: $name,
      industry: $industry,
      description: $description,
      descriptionEmbedding_embed: {model: "textembedding-gecko@003", text: $description},
      location: $location,
      website: $website,
      employeeCount: $employeeCount,
      updatedAt_expr: "request.time"
    }
  )
}

# Partner preferences mutations
mutation CreatePartnerPreferences(
  $workspaceId: UUID!,
  $industries: [String!],
  $locations: [String!],
  $minEmployeeCount: Int,
  $maxEmployeeCount: Int,
  $skillsNeeded: [String!]
) @auth(level: USER) {
  createPartnerPreferences: partnerPreferences_insert(
    data: {
      workspaceId: $workspaceId,
      industries: $industries,
      locations: $locations,
      minEmployeeCount: $minEmployeeCount,
      maxEmployeeCount: $maxEmployeeCount,
      skillsNeeded: $skillsNeeded
    }
  )
}

# Create partner preferences with combined embedding
mutation CreatePartnerPreferencesWithEmbedding(
  $workspaceId: UUID!,
  $industries: [String!],
  $locations: [String!],
  $minEmployeeCount: Int,
  $maxEmployeeCount: Int,
  $skillsNeeded: [String!],
  $combinedText: String!
) @auth(level: USER) {
  createPartnerPreferences: partnerPreferences_insert(
    data: {
      workspaceId: $workspaceId,
      industries: $industries,
      locations: $locations,
      minEmployeeCount: $minEmployeeCount,
      maxEmployeeCount: $maxEmployeeCount,
      skillsNeeded: $skillsNeeded,
      combinedEmbedding_embed: {model: "textembedding-gecko@003", text: $combinedText}
    }
  )
}

mutation UpdatePartnerPreferences(
  $id: UUID!,
  $industries: [String!],
  $locations: [String!],
  $minEmployeeCount: Int,
  $maxEmployeeCount: Int,
  $skillsNeeded: [String!]
) @auth(level: USER) {
  updatePartnerPreferences: partnerPreferences_update(
    key: { id: $id },
    data: {
      industries: $industries,
      locations: $locations,
      minEmployeeCount: $minEmployeeCount,
      maxEmployeeCount: $maxEmployeeCount,
      skillsNeeded: $skillsNeeded,
      updatedAt_expr: "request.time"
    }
  )
}

# Update partner preferences with combined embedding
mutation UpdatePartnerPreferencesWithEmbedding(
  $id: UUID!,
  $industries: [String!],
  $locations: [String!],
  $minEmployeeCount: Int,
  $maxEmployeeCount: Int,
  $skillsNeeded: [String!],
  $combinedText: String!
) @auth(level: USER) {
  updatePartnerPreferences: partnerPreferences_update(
    key: { id: $id },
    data: {
      industries: $industries,
      locations: $locations,
      minEmployeeCount: $minEmployeeCount,
      maxEmployeeCount: $maxEmployeeCount,
      skillsNeeded: $skillsNeeded,
      combinedEmbedding_embed: {model: "textembedding-gecko@003", text: $combinedText},
      updatedAt_expr: "request.time"
    }
  )
}

# LLM Key mutations
mutation CreateLLMKey(
  $entityType: String!,
  $entityId: String!,
  $provider: String!,
  $encryptedKey: String,
  $encryptionIV: String,
  $config: String
) @auth(level: USER) {
  createLLMKey: lLMKey_insert(
    data: {
      entityType: $entityType,
      entityId: $entityId,
      provider: $provider,
      encryptedKey: $encryptedKey,
      encryptionIV: $encryptionIV,
      config: $config
    }
  )
}

mutation UpdateLLMKey(
  $id: UUID!,
  $encryptedKey: String,
  $encryptionIV: String,
  $config: String
) @auth(level: USER) {
  updateLLMKey: lLMKey_update(
    key: { id: $id },
    data: {
      encryptedKey: $encryptedKey,
      encryptionIV: $encryptionIV,
      config: $config,
      updatedAt_expr: "request.time"
    }
  )
}

mutation DeleteLLMKey($id: UUID!) @auth(level: USER) {
  deleteLLMKey: lLMKey_delete(key: { id: $id })
}